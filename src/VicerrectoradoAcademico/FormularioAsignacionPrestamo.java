/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package VicerrectoradoAcademico;

import VicerrectoradoAcademico.VerRUdePersonalAcademico;
import ConexionLogin.Conexion;
import PersonalAcademico.DisponibilidadPrestamos;
import com.formdev.flatlaf.FlatLightLaf;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import javax.swing.JOptionPane;
import java.sql.ResultSet;
import java.sql.*;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author Rafael
 */
public class FormularioAsignacionPrestamo extends javax.swing.JFrame {
    private int idusuario;
    /**
     * Creates new form FormularioAsignacionPrestamo
     * @param idusuario
     */
    public FormularioAsignacionPrestamo(int idusuario) {
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.idusuario = idusuario;
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        Nombre.setEditable(false);
        cargarTabla(idusuario);
        cargarTabla2();
        cargarNombreApellido(idusuario);
    }

    private FormularioAsignacionPrestamo() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        NombreDocente = new javax.swing.JTextField();
        Formulario = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        FechaFin = new com.toedter.calendar.JDateChooser();
        FechaInicio = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        HorarioFijo = new javax.swing.JComboBox<>();
        Laboratorio = new javax.swing.JTextField();
        Seccion = new javax.swing.JComboBox<>();
        Bloque = new javax.swing.JComboBox<>();
        ElegirDocente = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        Semestre = new javax.swing.JComboBox<>();
        guardar = new javax.swing.JButton();
        Limpiar = new javax.swing.JButton();
        DisponibilidadPrestamo1 = new javax.swing.JButton();
        Nombre = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        Carrera = new javax.swing.JComboBox<>();
        Materia = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        ListaPersonal = new javax.swing.JLabel();
        Actualizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaAsignacion = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        MotivoRechazo = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaAsignacion2 = new javax.swing.JTable();
        FondoBlanco = new javax.swing.JLabel();
        perfil = new javax.swing.JLabel();
        Superior = new javax.swing.JLabel();
        FondoGris = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(194, 194, 194)));
        jPanel1.setToolTipText("");
        jPanel1.setOpaque(false);
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setText("Fecha Fin:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 140, -1, 20));

        NombreDocente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NombreDocenteActionPerformed(evt);
            }
        });
        jPanel1.add(NombreDocente, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 250, -1));

        Formulario.setFont(new java.awt.Font("Candara", 1, 24)); // NOI18N
        Formulario.setText("Formulario de Asignacion");
        jPanel1.add(Formulario, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel10.setText("Nombre del Docente:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, 20));

        jLabel5.setText("Materia:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 110, -1, 20));

        jLabel6.setText("Fecha Inicio:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, 20));
        jPanel1.add(FechaFin, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 140, 170, -1));
        jPanel1.add(FechaInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 140, 170, -1));

        jLabel9.setText("Bloque:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, -1, 20));

        jLabel15.setText("Secci√≥n:");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, -1, 20));

        jLabel11.setText("Laboratorio:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, -1, 20));

        jLabel3.setText("Horario:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, -1, 20));

        HorarioFijo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "7:30 - 9:00", "9:15 - 10:45", "11:00 - 12:30" }));
        HorarioFijo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HorarioFijoActionPerformed(evt);
            }
        });
        jPanel1.add(HorarioFijo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 260, 430, -1));

        Laboratorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LaboratorioActionPerformed(evt);
            }
        });
        jPanel1.add(Laboratorio, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 230, 250, -1));

        Seccion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hardware", "Redes", "Telecomunicaciones", "Electronica" }));
        jPanel1.add(Seccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 200, 430, -1));

        Bloque.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B", "C", "D" }));
        Bloque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BloqueActionPerformed(evt);
            }
        });
        jPanel1.add(Bloque, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 170, 430, -1));

        ElegirDocente.setBackground(new java.awt.Color(29, 41, 57));
        ElegirDocente.setForeground(new java.awt.Color(255, 255, 255));
        ElegirDocente.setText("Elegir Docente");
        ElegirDocente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ElegirDocenteActionPerformed(evt);
            }
        });
        jPanel1.add(ElegirDocente, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 80, 170, -1));

        jLabel8.setText("Semestre");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, -1, 20));

        Semestre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1-2025", "2-2026", "1-2027", "2-2027" }));
        jPanel1.add(Semestre, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 290, 430, -1));

        guardar.setBackground(new java.awt.Color(51, 153, 0));
        guardar.setForeground(new java.awt.Color(255, 255, 255));
        guardar.setText("Guardar Asignacion");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });
        jPanel1.add(guardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, 150, -1));

        Limpiar.setBackground(new java.awt.Color(29, 41, 57));
        Limpiar.setForeground(new java.awt.Color(255, 255, 255));
        Limpiar.setText("Limpiar");
        Limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarActionPerformed(evt);
            }
        });
        jPanel1.add(Limpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 320, 110, -1));

        DisponibilidadPrestamo1.setBackground(new java.awt.Color(29, 41, 57));
        DisponibilidadPrestamo1.setForeground(new java.awt.Color(255, 255, 255));
        DisponibilidadPrestamo1.setText("Seleccionar Laboratorio");
        DisponibilidadPrestamo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisponibilidadPrestamo1ActionPerformed(evt);
            }
        });
        jPanel1.add(DisponibilidadPrestamo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 230, 170, -1));
        jPanel1.add(Nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 430, -1));

        jLabel1.setText("Vicerrector:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 70, 20));

        jLabel7.setText("Carrera");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, 20));

        Carrera.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ingenier√≠a de Sistemas", "Ingenier√≠a Comercial", "Contaduria Publica", "Ciencias de la Educacion" }));
        jPanel1.add(Carrera, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 170, -1));
        jPanel1.add(Materia, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 110, 170, -1));

        jPanel3.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 610, 350));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ListaPersonal.setFont(new java.awt.Font("Candara", 1, 24)); // NOI18N
        ListaPersonal.setText("Historial de Asignaciones");
        jPanel4.add(ListaPersonal, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 270, -1));

        Actualizar.setBackground(new java.awt.Color(29, 41, 57));
        Actualizar.setForeground(new java.awt.Color(255, 255, 255));
        Actualizar.setText("Actualizar");
        Actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualizarActionPerformed(evt);
            }
        });
        jPanel4.add(Actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1320, 10, 110, -1));

        TablaAsignacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Laboratorio", "Docente", "Fecha Inicio", "Fecha Fin", "Horario Inicio", "Horario Fin", "Materia", "Carrera"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TablaAsignacion);

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 1420, 350));

        jPanel3.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 380, 1440, 380));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        MotivoRechazo.setFont(new java.awt.Font("Candara", 1, 24)); // NOI18N
        MotivoRechazo.setText("Descripci√≥n");
        jPanel2.add(MotivoRechazo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        TablaAsignacion2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Bloque", "Seccion", "Semestre"
            }
        ));
        int[]anchos2 = {50, 215, 70, 130};
        DefaultTableCellRenderer centerRenderer2 = new DefaultTableCellRenderer();
        centerRenderer2.setHorizontalAlignment(SwingConstants.CENTER);

        for (int i = 0; i < anchos2.length; i++) {
            TablaAsignacion2.getColumnModel().getColumn(i).setPreferredWidth(anchos2[i]);
            TablaAsignacion2.getColumnModel().getColumn(i).setCellRenderer(centerRenderer2);
        }
        jScrollPane2.setViewportView(TablaAsignacion2);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 790, 300));

        jPanel3.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 20, 810, 350));

        FondoBlanco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Fondo_2.png"))); // NOI18N
        jPanel3.add(FondoBlanco, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 10, 630));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 1480, 770));

        perfil.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/iconouser.png"))); // NOI18N
        getContentPane().add(perfil, new org.netbeans.lib.awtextra.AbsoluteConstraints(1480, 10, 40, -1));

        Superior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/SuperiorInterfaz.png"))); // NOI18N
        getContentPane().add(Superior, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1540, 60));

        FondoGris.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Fondo_3.png"))); // NOI18N
        getContentPane().add(FondoGris, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1540, 860));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void cargarNombreApellido(int idusuario) {
    try {
        Connection con = Conexion.obtenerConexion();

        String query = "SELECT CONCAT(nombre, ' ', apellido) AS nombre_completo FROM vicerrectorado_academico WHERE id_usuario = ?";

        PreparedStatement ps = con.prepareStatement(query);
        ps.setInt(1, idusuario);
        ResultSet rs = ps.executeQuery();

        if (rs.next()) {
            String nombreCompleto = rs.getString("nombre_completo");
            Nombre.setText(nombreCompleto);
        } else {
            JOptionPane.showMessageDialog(null, "No se encontraron datos del personal.");
        }
    } catch (SQLException ex) {
        System.out.println(ex.toString());
    }
}

    private void ActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualizarActionPerformed
        cargarTabla(idusuario);
        cargarTabla2();
    }//GEN-LAST:event_ActualizarActionPerformed

    private void HorarioFijoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HorarioFijoActionPerformed
        String selectedTime = (String) HorarioFijo.getSelectedItem();

        if (selectedTime == null || selectedTime.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado ning√∫n horario.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String[] times = selectedTime.split(" - ");

        if (times.length < 2) {
            JOptionPane.showMessageDialog(this, "Formato de horario inv√°lido. Aseg√∫rate de seleccionar un horario como '7:30 - 9:00'.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String startTime = times[0].trim();
        String endTime = times[1].trim();

        System.out.println("Hora de inicio: " + startTime);
        System.out.println("Hora de fin: " + endTime);
    }//GEN-LAST:event_HorarioFijoActionPerformed

    private void LaboratorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LaboratorioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LaboratorioActionPerformed

    private void BloqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BloqueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BloqueActionPerformed

    private void ElegirDocenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ElegirDocenteActionPerformed
        VerRUdePersonalAcademico RUpersonal = new VerRUdePersonalAcademico();
        RUpersonal.setLocationRelativeTo(null);
        RUpersonal.setVisible(true);
    }//GEN-LAST:event_ElegirDocenteActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
    String nombrevice = Nombre.getText();
    String carreratxt = Carrera.getSelectedItem().toString();
    String laboratorioText = Laboratorio.getText();
    String semestre = Semestre.getSelectedItem().toString();
    String materiatxt = Materia.getText();
    Date fechaInicioDate = FechaInicio.getDate();
    Date fechaFinDate = FechaFin.getDate();
    String horaSeleccionada = (String) HorarioFijo.getSelectedItem();

    if (carreratxt.isEmpty() || laboratorioText.isEmpty() || materiatxt.isEmpty() || semestre.isEmpty()
            || fechaInicioDate == null || fechaFinDate == null || horaSeleccionada == null || horaSeleccionada.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Por favor, complete todos los campos requeridos.");
        return;
    }

    if (fechaInicioDate.after(fechaFinDate)) {
        JOptionPane.showMessageDialog(null, "La fecha de inicio no puede ser posterior a la fecha de fin.");
        return;
    }

    String[] horas = horaSeleccionada.split("-");
    if (horas.length != 2) {
        JOptionPane.showMessageDialog(null, "Formato de horario fijo inv√°lido. Use el formato 'HH:mm - HH:mm'.");
        return;
    }

    String horaInicio = horas[0].trim();
    String horaFin = horas[1].trim();

    String regexHora = "^(\\d{1,2}):(\\d{2})$";
    if (!horaInicio.matches(regexHora) || !horaFin.matches(regexHora)) {
        JOptionPane.showMessageDialog(null, "El formato de la hora debe ser HH:mm.");
        return;
    }

    java.sql.Date sqlFechaInicio = new java.sql.Date(fechaInicioDate.getTime());
    java.sql.Date sqlFechaFin = new java.sql.Date(fechaFinDate.getTime());
    java.sql.Time sqlHoraInicio = java.sql.Time.valueOf(horaInicio + ":00");
    java.sql.Time sqlHoraFin = java.sql.Time.valueOf(horaFin + ":00");

    int idPersonalAcademico = 2;
    int idVicerrectorado = obtenerIdVicerrectorAcademico();

    if (idVicerrectorado == -1) {
        JOptionPane.showMessageDialog(null, "No se pudo obtener el ID del vicerrector acad√©mico.");
        return;
    }

    try {
        Connection con = Conexion.obtenerConexion();

        PreparedStatement psBuscarLab = con.prepareStatement(
                "SELECT ID_lab FROM laboratorios WHERE Nombre_lab = ?"
        );
        psBuscarLab.setString(1, laboratorioText);
        ResultSet rs = psBuscarLab.executeQuery();

        if (rs.next()) {
            int idLaboratorio = rs.getInt("ID_lab");

            PreparedStatement ps = con.prepareStatement(
                    "INSERT INTO asignaciones (ID_lab, id_personal_academico, carrera, materia, hora_inicio, hora_fin, fecha_inicio, fecha_fin, semestre, id_vicerrectorado_academico) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            );
            ps.setInt(1, idLaboratorio);
            ps.setInt(2, idPersonalAcademico);
            ps.setString(3, carreratxt);
            ps.setString(4, materiatxt);
            ps.setTime(5, sqlHoraInicio);
            ps.setTime(6, sqlHoraFin);
            ps.setDate(7, sqlFechaInicio);
            ps.setDate(8, sqlFechaFin);
            ps.setString(9, semestre);
            ps.setInt(10, idVicerrectorado);

            int rowsAffected = ps.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Asignaci√≥n guardada exitosamente.");
                limpiarFormulario();
                // cargarTablaAsignaciones();
            } else {
                JOptionPane.showMessageDialog(null, "Error al guardar la asignaci√≥n.");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Laboratorio no encontrado.");
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al guardar la asignaci√≥n: " + e.getMessage());
    }
    }//GEN-LAST:event_guardarActionPerformed
    private void limpiarFormulario(){
        NombreDocente.setText("");
        Nombre.setText("");
        Carrera.setSelectedIndex(0);
        Materia.setText("");
        FechaInicio.setDate(null);
        FechaFin.setDate(null);
        Bloque.setSelectedIndex(0);
        Seccion.setSelectedIndex(0);
        Laboratorio.setText("");
        HorarioFijo.setSelectedIndex(0);
        Semestre.setSelectedIndex(0);
    }
    private int obtenerIdLaboratorio(String bloque, String seccion) {
        int idLaboratorio = -1;

        try {
            Connection con = Conexion.obtenerConexion();
            String query = "SELECT id_lab FROM laboratorios WHERE bloque = ? AND seccion = ?";
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, bloque);
            ps.setString(2, seccion);

            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                idLaboratorio = rs.getInt("id_lab");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al obtener el ID del laboratorio: " + e.getMessage());
        }

        return idLaboratorio;
    }

    private int obtenerIdVicerrectorAcademico() {
        int id = -1;
        try {
            Connection con = Conexion.obtenerConexion();
            PreparedStatement ps = con.prepareStatement("SELECT id_vicerrectorado_academico FROM vicerrectorado_academico WHERE id_usuario = ?");
            ps.setInt(1, idusuario);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                id = rs.getInt("id_vicerrectorado_academico");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al obtener el ID del vicerrector academico: " + e.getMessage());
        }
        return id;
    }
    public void cargarTabla(int idusuario) {
    try {
        Connection con = Conexion.obtenerConexion();

        String query = "SELECT a.id_asignacion, l.Nombre_lab, " +
                       "CONCAT(pa.nombre, ' ', pa.apellido) AS nombre_completo, " +
                       "a.materia, a.carrera, a.fecha_inicio, a.fecha_fin, " +
                       "a.hora_inicio, a.hora_fin " +
                       "FROM asignaciones a " +
                       "INNER JOIN laboratorios l ON a.ID_lab = l.ID_lab " +
                       "INNER JOIN personal_academico pa ON a.id_personal_academico = pa.id_personal_academico " +
                       "WHERE pa.id_usuario = ?";

        PreparedStatement ps = con.prepareStatement(query);
        ps.setInt(1, idusuario);
        ResultSet rs = ps.executeQuery();

        DefaultTableModel model = (DefaultTableModel) TablaAsignacion.getModel();
        model.setRowCount(0);

        while (rs.next()) {
            int idAsignacion = rs.getInt("id_asignacion");
            String nombreLab = rs.getString("Nombre_lab");
            String nombreCompleto = rs.getString("nombre_completo");
            Date fechaInicio = rs.getDate("fecha_inicio");
            Date fechaFin = rs.getDate("fecha_fin");
            Time horaInicio = rs.getTime("hora_inicio");
            Time horaFin = rs.getTime("hora_fin");
            String materia = rs.getString("materia");
            String carrera = rs.getString("carrera");

            model.addRow(new Object[]{
                idAsignacion, nombreLab, nombreCompleto, fechaInicio, fechaFin, horaInicio, horaFin,
                materia, carrera
            });
        }

    } catch (SQLException ex) {
        System.out.println(ex.toString());
    }
}



    public void cargarTabla2() {
    try {
        Connection con = Conexion.obtenerConexion();

        String query = "SELECT a.id_asignacion, l.bloque, l.seccion, a.semestre " +
                       "FROM asignaciones a " +
                       "INNER JOIN laboratorios l ON a.ID_lab = l.ID_lab " +
                       "INNER JOIN personal_academico pa ON a.id_personal_academico = pa.id_personal_academico " +
                       "WHERE pa.id_usuario = ?";

        PreparedStatement ps = con.prepareStatement(query);
        ps.setInt(1, idusuario);
        ResultSet rs = ps.executeQuery();

        DefaultTableModel model2 = (DefaultTableModel) TablaAsignacion2.getModel();
        model2.setRowCount(0);

        while (rs.next()) {
            int idAsignacion = rs.getInt("id_asignacion");
            String bloque = rs.getString("bloque");
            String seccion = rs.getString("seccion");
            String semestre = rs.getString("semestre");

            model2.addRow(new Object[]{
                idAsignacion, bloque, seccion, semestre
            });
        }

        

    } catch (SQLException ex) {
        System.out.println(ex.toString());
    }
}

    private void LimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarActionPerformed
        limpiarFormulario();
    }//GEN-LAST:event_LimpiarActionPerformed

    private void DisponibilidadPrestamo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisponibilidadPrestamo1ActionPerformed
        DisponibilidadPrestamos disponibilidadpres = new DisponibilidadPrestamos(Laboratorio);
        disponibilidadpres.setLocationRelativeTo(null);
        disponibilidadpres.setVisible(true);
    }//GEN-LAST:event_DisponibilidadPrestamo1ActionPerformed

    private void NombreDocenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NombreDocenteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NombreDocenteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormularioAsignacionPrestamo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormularioAsignacionPrestamo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormularioAsignacionPrestamo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormularioAsignacionPrestamo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        try {
            UIManager.setLookAndFeel(new FlatLightLaf());
        } catch (Exception e) {
            e.printStackTrace();
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormularioAsignacionPrestamo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Actualizar;
    private javax.swing.JComboBox<String> Bloque;
    private javax.swing.JComboBox<String> Carrera;
    private javax.swing.JButton DisponibilidadPrestamo1;
    private javax.swing.JButton ElegirDocente;
    private com.toedter.calendar.JDateChooser FechaFin;
    private com.toedter.calendar.JDateChooser FechaInicio;
    private javax.swing.JLabel FondoBlanco;
    private javax.swing.JLabel FondoGris;
    private javax.swing.JLabel Formulario;
    private javax.swing.JComboBox<String> HorarioFijo;
    private javax.swing.JTextField Laboratorio;
    private javax.swing.JButton Limpiar;
    private javax.swing.JLabel ListaPersonal;
    private javax.swing.JTextField Materia;
    private javax.swing.JLabel MotivoRechazo;
    private javax.swing.JTextField Nombre;
    private javax.swing.JTextField NombreDocente;
    private javax.swing.JComboBox<String> Seccion;
    private javax.swing.JComboBox<String> Semestre;
    private javax.swing.JLabel Superior;
    private javax.swing.JTable TablaAsignacion;
    private javax.swing.JTable TablaAsignacion2;
    private javax.swing.JButton guardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel perfil;
    // End of variables declaration//GEN-END:variables
}
